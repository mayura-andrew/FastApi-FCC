name: Build and Deploy Code

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Run Tests
        run: |
          pip install pytest
          pytest

      - name: Set up PostgreSQL
        run: |
          # Install PostgreSQL client
          sudo apt-get update
          sudo apt-get install -y postgresql-client

          # Connect to the PostgreSQL server and create a superuser with the password
          psql -h localhost -U postgres -d postgres -c "CREATE USER postgres WITH PASSWORD '${{secrets.DATABASE_PASSWORD}}';"
          psql -h localhost -U postgres -d postgres -c "ALTER ROLE postgres WITH SUPERUSER;"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapigithub:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Show Docker Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: [build]
#     environment:
#       name: production

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v2

#       - name: Deploy to Heroku (or other deployment steps)
#         run: |
#           # Add your deployment steps here
#           # Example: Deploying to Heroku
#           # heroku login -i
#           # heroku container:login
#           # heroku container:push web -a your-heroku-app-name
#           # heroku container:release web -a your-heroku-app-name

      # Add more deployment steps as needed
